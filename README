# 💪🍎 Train Eat Repeat - Personalized Fitness & Nutrition Planner App 🏋️‍♀️🥗

Train Eat Repeat is an application that integrates the power of OpenAI's GPT-3 model, a Flask backend server, and a fun 🎉 frontend form to generate personalized workout and meal plans.

## 🎯 What it Does

Train Eat Repeat asks users to input their health and fitness details via a form 📝, including height, weight, age, sex, BMI, fitness level, workout type, and goal. Upon submission, the form data is sent to our Flask backend as a POST request.

This data then informs a set of prompts sent to OpenAI's GPT-3 model, which returns AI-generated workout and meal plans 🍛🏋️ tailored to the user's input. The plans are formatted and returned to the user, displayed on the web page, and also sent via email 📧.

## 🔧 Getting Started

**Step 1: Clone the Repo** 📂

Use the following commands in your terminal to clone the repository and navigate into the project directory:

```bash
git clone <repo_url>
cd <repo_directory>

Step 2: Set Up Your Environment 🌍

You'll need to set up several environment variables:

    OPENAI_API_KEY: This is your personal OpenAI API key 🔑, which allows access to the GPT-3 API.
    PORT: This is the port where your Flask app will run. If not provided, it defaults to 5000.

Remember to also configure your AWS credentials if you want to use Amazon SES for email functionality.

Step 3: Install Required Packages 📦

Install the necessary Python packages using the provided requirements.txt file:

bash

pip install -r requirements.txt

Step 4: Run the App 🚀

Start the Flask application with:

bash

python main.py

The app will now be running on localhost:<your_port>. You can navigate to this address in your web browser to view the form and submit data.
📫 Interacting with the App

There are two primary ways to interact with the application: through the frontend form and through direct API requests.

Frontend Form 🖥

The form asks users to input their height (in feet and inches), weight (in kg), age, sex, BMI, fitness level, desired type of workout, and fitness goal. On submission, the form prevents the default page refresh and sends a POST request to the /generate_plan endpoint with the form data.

API Requests 📡

Alternatively, you can send a POST request directly to the /generate_plan endpoint with the following JSON body:

json

{
  "height": "5' 7\"",
  "weight": 70,
  "age": 30,
  "sex": "female",
  "bmi": 24.2,
  "fitness_level": "intermediate",
  "workout_type": "<workout_type>",
  "goal": "<goal>"
}

🛠 Customizing the App

You can customize the prompts sent to OpenAI by modifying the format_workout_prompt() and format_meal_prompt() functions in main.py. Additionally, the parsing and formatting of the responses can be adjusted in the parse_workout_response() and parse_meal_response() functions.


## 🚀 Future Development

Our team is constantly looking to improve and expand upon the capabilities of Train Eat Repeat, and we have some exciting developments in the pipeline!

**1. Integration of Juggernaut Powerlifting Method** 🏋️‍♂️

We plan on adding the Juggernaut Powerlifting Method, a highly recommended regimen developed by Chad Wesley Smith and Juggernaut Training Systems. This comprehensive 16-week cycle emphasizes submaximal work to increase the lifter's work capacity without excessively taxing the Central Nervous System (CNS). It's perfect for intermediate-level lifters looking to up their strength game. 

**2. Exercise Videos from YouTube's API** 🎥

To make your workouts as effective and safe as possible, we aim to integrate YouTube's API to provide video demonstrations for each recommended exercise. This way, you can ensure your form is correct and minimize the risk of injury.

**3. Containerizing the App with Docker** 📦

For easier deployment and scaling, we plan on containerizing the app with Docker. This will enable us to ensure consistent performance regardless of the environment in which the app is run.

Please stay tuned for these exciting updates, and don't hesitate to reach out if you have additional ideas or feedback! 💡💬





🙋‍♀️ Need Help?

Encountered a problem or have a suggestion